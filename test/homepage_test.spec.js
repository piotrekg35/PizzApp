// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('homepage_test', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  it('homepage_test', async function() {
    // Test name: homepage_test
    // Step # | name | target | value
    // 1 | open | http://localhost:4200/ | 
    await driver.get("http://localhost:4200/")
    // 2 | setWindowSize | 1536x824 | 
    await driver.manage().window().setRect({ width: 1536, height: 824 })
    // 3 | click | css=ul:nth-child(2) > li:nth-child(1) | 
    await driver.findElement(By.css("ul:nth-child(2) > li:nth-child(1)")).click()
    // 4 | click | css=#mat-tab-label-0-0 .mdc-tab__text-label | 
    await driver.findElement(By.css("#mat-tab-label-0-0 .mdc-tab__text-label")).click()
    // 5 | click | css=.restaurant | 
    await driver.findElement(By.css(".restaurant")).click()
    // 6 | verifyText | css=ul:nth-child(2) > li:nth-child(1) | Pn-Pt: 8.00 - 20.00
    assert(await driver.findElement(By.css("ul:nth-child(2) > li:nth-child(1)")).getText() == "Pn-Pt: 8.00 - 20.00")
    // 7 | click | css=ul:nth-child(2) > li:nth-child(2) | 
    await driver.findElement(By.css("ul:nth-child(2) > li:nth-child(2)")).click()
    // 8 | verifyText | css=ul:nth-child(2) > li:nth-child(2) | Sb: 9.00 - 18.00
    assert(await driver.findElement(By.css("ul:nth-child(2) > li:nth-child(2)")).getText() == "Sb: 9.00 - 18.00")
    // 9 | click | css=ul:nth-child(2) > li:nth-child(3) | 
    await driver.findElement(By.css("ul:nth-child(2) > li:nth-child(3)")).click()
    // 10 | verifyText | css=ul:nth-child(2) > li:nth-child(3) | Nd: 9.00 - 16.00
    assert(await driver.findElement(By.css("ul:nth-child(2) > li:nth-child(3)")).getText() == "Nd: 9.00 - 16.00")
    // 11 | click | css=#mat-tab-label-0-1 > .mdc-tab__content | 
    await driver.findElement(By.css("#mat-tab-label-0-1 > .mdc-tab__content")).click()
    // 12 | click | css=.restaurant |
    await driver.sleep(3000)
    await driver.findElement(By.css(".restaurant")).click()
    // 13 | verifyText | css=ul:nth-child(2) > li:nth-child(1) | Pn-Sb: 9.00 - 18.00
    assert(await driver.findElement(By.css("ul:nth-child(2) > li:nth-child(1)")).getText() == "Pn-Sb: 9.00 - 18.00")
    // 14 | click | css=ul:nth-child(2) > li:nth-child(2) | 
    await driver.findElement(By.css("ul:nth-child(2) > li:nth-child(2)")).click()
    // 15 | verifyText | css=ul:nth-child(2) > li:nth-child(2) | Nd: zamknięte
    assert(await driver.findElement(By.css("ul:nth-child(2) > li:nth-child(2)")).getText() == "Nd: zamknięte")
    // 16 | click | css=#mat-tab-label-0-2 > .mdc-tab__content | 
    await driver.findElement(By.css("#mat-tab-label-0-2 > .mdc-tab__content")).click()
    // 17 | click | css=.restaurant |
    await driver.sleep(3000)
    await driver.findElement(By.css(".restaurant")).click()
    // 18 | verifyText | css=ul:nth-child(2) > li:nth-child(1) | Pn-Pt: 10.00 - 22.00
    assert(await driver.findElement(By.css("ul:nth-child(2) > li:nth-child(1)")).getText() == "Pn-Pt: 10.00 - 22.00")
    // 19 | click | css=.restaurant |
    await driver.findElement(By.css(".restaurant")).click()
    await driver.sleep(3000)
    // 20 | verifyText | css=ul:nth-child(2) > li:nth-child(2) | Sb-Nd: 12.00 - 18.00
    assert(await driver.findElement(By.css("ul:nth-child(2) > li:nth-child(2)")).getText() == "Sb-Nd: 12.00 - 18.00")
    // 21 | click | css=ul:nth-child(2) > li:nth-child(3) | 
    await driver.findElement(By.css("ul:nth-child(2) > li:nth-child(3)")).click()
    // 22 | verifyText | css=ul:nth-child(2) > li:nth-child(3) | Nd: 12.00 - 16.00
    assert(await driver.findElement(By.css("ul:nth-child(2) > li:nth-child(3)")).getText() == "Nd: 12.00 - 16.00")
    // 23 | click | css=div > h2 | 
    await driver.findElement(By.css("div > h2")).click()
    // 24 | click | css=footer | 
    await driver.findElement(By.css("footer"))
    // 25 | verifyText | css=footer > h2 | Pizzeria
    assert(await driver.findElement(By.css("footer > h2")).getText() == "Pizzeria")
    // 26 | click | css=footer | 
    await driver.findElement(By.css("footer"))
    // 27 | click | css=footer > p:nth-child(2) |
    await driver.findElement(By.css("footer > p:nth-child(2)"))
    // 28 | click | css=footer | 
    await driver.findElement(By.css("footer"))
    // 29 | verifyText | css=footer > p:nth-child(2) | Tel.: 123 456 789
    assert(await driver.findElement(By.css("footer > p:nth-child(2)")).getText() == "Tel.: 123 456 789")
    // 30 | click | css=.homeWrapper | 
    await driver.findElement(By.css(".homeWrapper")).click()
    // 31 | verifyText | css=p:nth-child(3) | Adres email: pizzeria01@gmail.com
    assert(await driver.findElement(By.css("p:nth-child(3)")).getText() == "Adres email: pizzeria01@gmail.com")
    // 32 | click | css=.homeWrapper | 
    await driver.findElement(By.css(".homeWrapper")).click()
    // 33 | click | css=.homeWrapper > p | 
    await driver.findElement(By.css(".homeWrapper > p")).click()
    // 34 | click | css=.homeWrapper > p | 
    await driver.findElement(By.css(".homeWrapper > p")).click()
    // 35 | doubleClick | css=.homeWrapper > p | 
    {
      const element = await driver.findElement(By.css(".homeWrapper > p"))
      await driver.actions({ bridge: true}).doubleClick(element).perform()
    }
    // 36 | click | css=.homeWrapper > p | 
    await driver.findElement(By.css(".homeWrapper > p")).click()
    // 37 | verifyText | css=.homeWrapper > p | Zamów pizzę online i ciesz się wyjątkowym smakiem bez wychodzenia z domu!
    assert(await driver.findElement(By.css(".homeWrapper > p")).getText() == "Zamów pizzę online i ciesz się wyjątkowym smakiem bez wychodzenia z domu!")
    // 41 | verifyText | css=h1 | PIZZAPP
    assert(await driver.findElement(By.css("h1")).getText() == "PIZZAPP")
    // 42 | click | css=.homeWrapper | 
    await driver.findElement(By.css(".homeWrapper")).click()
  })
})
